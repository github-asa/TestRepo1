using System;
using J2BIOverseasOps.Extensions;
using log4net;
using NUnit.Framework;
using OpenQA.Selenium;
using TechTalk.SpecFlow;

namespace J2BIOverseasOps.Pages.BuildingWork
{
    internal class FullRecordOverviewComponent : BuildingWorkCommon
    {

        private readonly By _bwId = By.Id("BuildingWorkIdField"); 
        private readonly By _nameTitleField = By.Id("RecordedByField");
        private readonly By _recordCreationDate = By.Id("RecordCreationDataField");
        private readonly By _airportIataCode=By.Id("IataCodeField");
        private readonly By _resortField = By.Id("ResortField");
        private readonly By _propertyField = By.Id("PropertyField");
        public readonly By _commitmentLevelField=By.Id("CommitmentLevelField-1");

        public FullRecordOverviewComponent(IWebDriver driver, ILog log,IRunData rundata) : base(driver, log,rundata)
        {
        }

        public void VerifyBwIdStartsWith(string expected)
        {
            var bwIdPrefix = Driver.GetText(_bwId).Trim().Substring(0, 2);
            Assert.AreEqual(bwIdPrefix, expected);
        }

        public void VerifyIataCodeInId(string iataCode)
        {
            var bwIataCode = Driver.GetText(_bwId).Trim().Substring(3, 3);
            Assert.AreEqual(bwIataCode, iataCode);
        }

        public void VerifyBwIdNumber()
        {
            var bwIataCode = Driver.GetText(_bwId).Trim().Substring(7);
            int i;
            var isNumeric = int.TryParse(bwIataCode, out i);
            Assert.True(isNumeric, $"Could not verify the last item in iata code id as a number. Actual {i}");
        }

        public void VerifyBwId()
        {
            var actualBwId = Driver.FindElement(_bwId).Text;
            var expectedBwId = ScenarioContext.Current[BwIdScenarioContextKey].ToString();
            Assert.AreEqual(expectedBwId, actualBwId);
        }

        public void VerifyRecordCreationDateAsTodays()
        {
            var actualRecordCreatiobDate = Driver.GetText(_recordCreationDate);
            var expectedRecordCreatiobDate = DateTime.Now.ToString("dd/MM/yyyy");
            Assert.AreEqual(actualRecordCreatiobDate, expectedRecordCreatiobDate);
        }

        public void VerifyFormCompletionDate()
        {
            var actualRecordCreatiobDate = Driver.GetText(_recordCreationDate);
            var expectedRecordCreatiobDate = DateTime.Now.ToString("dd/MM/yyyy");
            Assert.AreEqual(actualRecordCreatiobDate, expectedRecordCreatiobDate);
        }

        public void VerifyNameTitleField(string nameTitle)
        {
            var nameTitleFieldValue = Driver.GetText(_nameTitleField);
            var expectedName = ScenarioContext.Current[CurrentUserFullname].ToString(); 
            var expectedJobTitle = ScenarioContext.Current[CurrentUserRole].ToString();
            switch (nameTitle)
            {
                case "Name":
                    Assert.True(nameTitleFieldValue.Contains(expectedName),$"Expected Name {expectedName} was not present in {nameTitleFieldValue}");
                    break;
                case "Job Title":
                    Assert.True(nameTitleFieldValue.Contains(expectedJobTitle), $"Expected Title {expectedJobTitle} was not present in {nameTitleFieldValue}");
                    break;
            }
        }

        public void NoteDownAutoGeneratedFields(Table table)
        {
            foreach (var row in table.Rows)
            {
                var fieldName = row["field"];
                switch (fieldName.ToLower())
                {
                    case "bw_id":
                        ScenarioContext.Current[BwIdScenarioContextKey] = Driver.FindElement(_bwId).Text.Trim();
                        break;
                    case "record_creation_date":
                        ScenarioContext.Current[RecordCreationDateContextKey] = Driver.FindElement(_recordCreationDate).Text.Trim();
                        break;
                    case "recorded_by":
                        ScenarioContext.Current[RecordedByContextKey] = Driver.FindElement(_nameTitleField).Text.Trim();
                        break;
                    case "airport":
                        ScenarioContext.Current[AirportContextKey] = Driver.FindElement(_airportIataCode).Text.Trim();
                        break;
                    case "resort":
                        ScenarioContext.Current[ResortContextKey] = Driver.FindElement(_resortField).Text.Trim();
                        break;
                    case "property":
                        ScenarioContext.Current[PropertyContextKey] = Driver.FindElement(_propertyField).Text.Trim();
                        break;
                    case "work_start_date":
                        ScenarioContext.Current[WrkStartDateConextKey] = Driver.FindElement(_airportIataCode).Text.Trim();
                        break;
                    case "completion_date":
                        ScenarioContext.Current[WrkCompletionDateContextKey] = Driver.FindElement(_airportIataCode).Text.Trim();
                        break;
                    default:
                        Assert.Fail($"{fieldName} is not a valid auto generated fieldname");
                        break;
                }
            }
        }

        public void VerifyAutoGeneratedFields(Table table)
        {
            var expectedValue = "";
            var actualValue = "";
            foreach (var row in table.Rows)
            {
                var fieldName = row["field"];
                switch (fieldName.ToLower())
                {
                    case "bw_id":
                        expectedValue = ScenarioContext.Current[BwIdScenarioContextKey].ToString();
                        actualValue= Driver.FindElement(_bwId).Text.Trim();
                        break;
                    case "record_creation_date":
                        expectedValue = ScenarioContext.Current[RecordCreationDateContextKey].ToString();
                        actualValue= Driver.FindElement(_recordCreationDate).Text.Trim();
                        break;
                    case "recorded_by":
                        expectedValue= ScenarioContext.Current[RecordedByContextKey].ToString();
                        actualValue= Driver.FindElement(_nameTitleField).Text.Trim();
                        break;
                    case "airport":
                        expectedValue = ScenarioContext.Current[AirportContextKey].ToString();
                        actualValue= Driver.FindElement(_airportIataCode).Text.Trim();
                        break;
                    case "resort":
                        expectedValue = ScenarioContext.Current[ResortContextKey].ToString();
                        actualValue = Driver.FindElement(_resortField).Text.Trim();
                        break;
                    case "property":
                        expectedValue = ScenarioContext.Current[PropertyContextKey].ToString();
                        actualValue = Driver.FindElement(_propertyField).Text.Trim();
                        break;
                    default:
                        Assert.Fail($"{fieldName} is not a valid auto generated fieldname");
                        break;
                }

                Assert.AreEqual(expectedValue,actualValue,$"Expected Value: {expectedValue} was not equal to Actual Value: {actualValue}");
            }
        }

        public void VerifyBwPropertyDetailsOverviewSection(string expectedAirport, string expectedResort, string expectedProperty)
        {
            var actualAirport = Driver.GetText(_airportIataCode);
            var actualResort = Driver.GetText(_resortField);
            var actualProperty = Driver.GetText(_propertyField);
            Assert.AreEqual(expectedAirport,actualAirport,$"Overview field Airport: Expected {expectedAirport} was not same as Actual :{actualAirport}");
            Assert.AreEqual(expectedResort, actualResort,$"Overview field Resort: Expected {expectedResort} was not the same as Actual {actualResort}");
            Assert.AreEqual(expectedProperty, actualProperty,$"Overview field Property: Expected {expectedProperty} was not the same as Actual {actualProperty}");
        }


        public void VerifyValueOfFields(Table table)
        {
            foreach (var row in table.Rows)
            {
                var field = row["field"];
                var value = row["value"];

                switch (field.ToLower())
                {
                    case "commitment level":
                        if (value.ToLower()=="blank")
                        {
                            Assert.True(!Driver.WaitForItem(_commitmentLevelField,1),"Commitment field displayed while expecting it not to be present");
                        }
                        break;
                        default:
                          Assert.Fail($"{field} is not a valid field");
                        break;
                        
                }
            }
        }
    }
}